#!/usr/bin/env python3
"""
Prompt Engineering Demo: Designing prompts with clear instructions and rich context
Minh h·ªça c√°ch thi·∫øt k·∫ø prompts v·ªõi h∆∞·ªõng d·∫´n r√µ r√†ng v√† ng·ªØ c·∫£nh phong ph√∫
"""

import os
from dotenv import load_dotenv
from langchain_openai import AzureChatOpenAI

# Load environment variables
load_dotenv()

print("=== PROMPT ENGINEERING: Clear Instructions & Rich Context ===\n")

# Setup Azure OpenAI connection
print("1. K·∫øt n·ªëi v·ªõi Azure OpenAI...")
try:
    llm = AzureChatOpenAI(
        azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
        api_key=os.getenv("AZURE_OPENAI_API_KEY"),
        api_version=os.getenv("AZURE_OPENAI_API_VERSION", "2023-12-01-preview"),
        azure_deployment=os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME"),
        temperature=0.3,
        max_tokens=400
    )
    print("‚úì K·∫øt n·ªëi th√†nh c√¥ng")
except Exception as e:
    print(f"‚úó L·ªói k·∫øt n·ªëi: {e}")
    exit(1)

print("\n" + "="*80)

# DEMO 1: VAGUE vs CLEAR INSTRUCTIONS
print("DEMO 1: SO S√ÅNH PROMPT M∆†H·ªí vs R√ï R√ÄNG\n")

# BAD EXAMPLE: Vague prompt
print("‚ùå PROMPT M∆†H·ªí (Kh√¥ng n√™n):")
vague_prompt = "Vi·∫øt v·ªÅ AI"
print(f"Prompt: '{vague_prompt}'")
print("ƒêang x·ª≠ l√Ω...")

try:
    response = llm.invoke(vague_prompt)
    print(f"K·∫øt qu·∫£: {response.content}")
except Exception as e:
    print(f"L·ªói: {e}")

print("\n" + "-"*50)

# GOOD EXAMPLE: Clear instructions
print("‚úÖ PROMPT R√ï R√ÄNG (N√™n l√†m):")
clear_prompt = """
Vi·∫øt m·ªôt ƒëo·∫°n vƒÉn ng·∫Øn (kho·∫£ng 100 t·ª´) v·ªÅ AI cho h·ªçc sinh c·∫•p 3.
Y√™u c·∫ßu:
- Gi·∫£i th√≠ch AI l√† g√¨ m·ªôt c√°ch ƒë∆°n gi·∫£n
- ƒê∆∞a ra 2 v√≠ d·ª• c·ª• th·ªÉ v·ªÅ AI trong ƒë·ªùi s·ªëng
- S·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu, kh√¥ng qu√° k·ªπ thu·∫≠t
- K·∫øt th√∫c b·∫±ng m·ªôt c√¢u t√≠ch c·ª±c v·ªÅ t∆∞∆°ng lai AI
"""
print(f"Prompt: {clear_prompt}")
print("ƒêang x·ª≠ l√Ω...")

try:
    response = llm.invoke(clear_prompt)
    print(f"K·∫øt qu·∫£: {response.content}")
except Exception as e:
    print(f"L·ªói: {e}")

print("\n" + "="*80)

# DEMO 2: NO CONTEXT vs RICH CONTEXT
print("DEMO 2: SO S√ÅNH KH√îNG NG·ªÆC·∫¢NH vs NG·ªÆC·∫¢NH PHONG PH√ö\n")

# BAD EXAMPLE: No context
print("‚ùå KH√îNG NG·ªÆC·∫¢NH (Kh√¥ng n√™n):")
no_context_prompt = "T√¥i n√™n l√†m g√¨?"
print(f"Prompt: '{no_context_prompt}'")
print("ƒêang x·ª≠ l√Ω...")

try:
    response = llm.invoke(no_context_prompt)
    print(f"K·∫øt qu·∫£: {response.content}")
except Exception as e:
    print(f"L·ªói: {e}")

print("\n" + "-"*50)

# GOOD EXAMPLE: Rich context
print("‚úÖ NG·ªÆC·∫¢NH PHONG PH√ö (N√™n l√†m):")
rich_context_prompt = """
NG·ªÆC·∫¢NH: T√¥i l√† m·ªôt sinh vi√™n nƒÉm 3 ng√†nh C√¥ng ngh·ªá th√¥ng tin. T√¥i ƒëang h·ªçc v·ªÅ AI v√† mu·ªën t√¨m m·ªôt d·ª± √°n th·ª±c t·∫ø ƒë·ªÉ th·ª±c hi·ªán trong h·ªçc k·ª≥ n√†y.

TH√îNG TIN B·ªî SUNG:
- Th·ªùi gian: 3 th√°ng
- K·ªπ nƒÉng hi·ªán t·∫°i: Python c∆° b·∫£n, ƒë√£ h·ªçc machine learning l√Ω thuy·∫øt
- M·ª•c ti√™u: T·∫°o ra s·∫£n ph·∫©m c√≥ th·ªÉ demo ƒë∆∞·ª£c
- S·ªü th√≠ch: Game, √¢m nh·∫°c, th·ªÉ thao

Y√äU C·∫¶U: H√£y ƒë·ªÅ xu·∫•t 3 √Ω t∆∞·ªüng d·ª± √°n AI ph√π h·ª£p v·ªõi t√¨nh h√¨nh c·ªßa t√¥i. M·ªói √Ω t∆∞·ªüng c·∫ßn bao g·ªìm:
1. T√™n d·ª± √°n
2. M√¥ t·∫£ ng·∫Øn g·ªçn
3. C√¥ng ngh·ªá s·ª≠ d·ª•ng
4. M·ª©c ƒë·ªô kh√≥ (1-10)
5. K·∫øt qu·∫£ mong ƒë·ª£i
"""
print(f"Prompt: {rich_context_prompt}")
print("ƒêang x·ª≠ l√Ω...")

try:
    response = llm.invoke(rich_context_prompt)
    print(f"K·∫øt qu·∫£: {response.content}")
except Exception as e:
    print(f"L·ªói: {e}")

print("\n" + "="*80)

# DEMO 3: ROLE-BASED PROMPTING WITH CONTEXT
print("DEMO 3: PROMPT THEO VAI TR√í V·ªöI NG·ªÆC·∫¢NH\n")

role_prompt = """
VAI TR√í: B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n kh√°ch h√†ng c·ªßa m·ªôt ng√¢n h√†ng v·ªõi 10 nƒÉm kinh nghi·ªám.

NG·ªÆC·∫¢NH: Kh√°ch h√†ng l√† m·ªôt c·∫∑p v·ª£ ch·ªìng tr·∫ª (28 tu·ªïi), m·ªõi c∆∞·ªõi, ƒëang c√≥ thu nh·∫≠p ·ªïn ƒë·ªãnh 50 tri·ªáu/th√°ng, mu·ªën mua nh√† ƒë·∫ßu ti√™n.

TH√îNG TIN KH√ÅCH H√ÄNG:
- Ti·∫øt ki·ªám hi·ªán t·∫°i: 800 tri·ªáu
- M·ª©c nh√† mong mu·ªën: 3-4 t·ª∑  
- V·ªã tr√≠: G·∫ßn trung t√¢m TP.HCM
- M·ª•c ti√™u: ·ªîn ƒë·ªãnh l√¢u d√†i, kh√¥ng mu·ªën √°p l·ª±c t√†i ch√≠nh qu√° l·ªõn

NHI·ªÜM V·ª§: H√£y ƒë∆∞a ra l·ªùi khuy√™n chi ti·∫øt v·ªÅ:
1. Chi·∫øn l∆∞·ª£c t√†i ch√≠nh (t·ª∑ l·ªá vay/v·ªën t·ª± c√≥)
2. Lo·∫°i h√¨nh vay ph√π h·ª£p
3. Nh·ªØng l∆∞u √Ω quan tr·ªçng khi mua nh√†
4. Timeline th·ª±c hi·ªán

Y√äU C·∫¶U: Tr·∫£ l·ªùi theo phong c√°ch chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán, d·ªÖ hi·ªÉu.
"""
print(f"Prompt: {role_prompt}")
print("ƒêang x·ª≠ l√Ω...")

try:
    response = llm.invoke(role_prompt)
    print(f"K·∫øt qu·∫£: {response.content}")
except Exception as e:
    print(f"L·ªói: {e}")

print("\n" + "="*80)

# DEMO 4: STRUCTURED OUTPUT WITH CONSTRAINTS
print("DEMO 4: Y√äU C·∫¶U ƒê·ªäNH D·∫†NG ƒê·∫¶U RA C·ª§ TH·ªÇ\n")

structured_prompt = """
NHI·ªÜM V·ª§: Ph√¢n t√≠ch SWOT cho c√¥ng ty kh·ªüi nghi·ªáp v·ªÅ ·ª©ng d·ª•ng giao ƒë·ªì ƒÉn.

NG·ªÆC·∫¢NH:
- C√¥ng ty: FoodExpress
- Th·ªã tr∆∞·ªùng: Vi·ªát Nam
- Giai ƒëo·∫°n: Startup m·ªõi th√†nh l·∫≠p
- ƒê·ªëi th·ªß ch√≠nh: Grab Food, Shopee Food, Baemin

Y√äU C·∫¶U ƒê·ªäNH D·∫†NG:
Strengths (ƒêi·ªÉm m·∫°nh):
- [ƒêi·ªÉm 1]: [Gi·∫£i th√≠ch ng·∫Øn]
- [ƒêi·ªÉm 2]: [Gi·∫£i th√≠ch ng·∫Øn]
- [ƒêi·ªÉm 3]: [Gi·∫£i th√≠ch ng·∫Øn]

Weaknesses (ƒêi·ªÉm y·∫øu):
- [ƒêi·ªÉm 1]: [Gi·∫£i th√≠ch ng·∫Øn]
- [ƒêi·ªÉm 2]: [Gi·∫£i th√≠ch ng·∫Øn]
- [ƒêi·ªÉm 3]: [Gi·∫£i th√≠ch ng·∫Øn]

Opportunities (C∆° h·ªôi):
- [C∆° h·ªôi 1]: [Gi·∫£i th√≠ch ng·∫Øn]
- [C∆° h·ªôi 2]: [Gi·∫£i th√≠ch ng·∫Øn]
- [C∆° h·ªôi 3]: [Gi·∫£i th√≠ch ng·∫Øn]

Threats (Th√°ch th·ª©c):
- [Th√°ch th·ª©c 1]: [Gi·∫£i th√≠ch ng·∫Øn]
- [Th√°ch th·ª©c 2]: [Gi·∫£i th√≠ch ng·∫Øn]
- [Th√°ch th·ª©c 3]: [Gi·∫£i th√≠ch ng·∫Øn]

KHUY·∫æN NGH·ªä CHI·∫æN L∆Ø·ª¢C:
[2-3 c√¢u t·ªïng k·∫øt v√† ƒë·ªÅ xu·∫•t h∆∞·ªõng ph√°t tri·ªÉn]

L∆ØU √ù: M·ªói m·ª•c ch·ªâ n√™n 1-2 c√¢u, t·∫≠p trung v√†o th√¥ng tin quan tr·ªçng nh·∫•t.
"""
print(f"Prompt: {structured_prompt}")
print("ƒêang x·ª≠ l√Ω...")

try:
    response = llm.invoke(structured_prompt)
    print(f"K·∫øt qu·∫£: {response.content}")
except Exception as e:
    print(f"L·ªói: {e}")

print("\n" + "="*80)
print("‚úÖ DEMO HO√ÄN TH√ÄNH!")
print("\nC√ÅC NGUY√äN T·∫ÆC PROMPT ENGINEERING ƒê√É MINH H·ªåA:")
print("1. üéØ H∆∞·ªõng d·∫´n r√µ r√†ng thay v√¨ m∆° h·ªì")
print("2. üìñ Cung c·∫•p ng·ªØ c·∫£nh phong ph√∫")
print("3. üé≠ S·ª≠ d·ª•ng vai tr√≤ c·ª• th·ªÉ")
print("4. üìã Y√™u c·∫ßu ƒë·ªãnh d·∫°ng ƒë·∫ßu ra")
print("5. ‚ö° R√†ng bu·ªôc v√† gi·ªõi h·∫°n r√µ r√†ng")
print("\nüí° K·∫æT LU·∫¨N: Prompt t·ªët = H∆∞·ªõng d·∫´n r√µ r√†ng + Ng·ªØ c·∫£nh phong ph√∫ = K·∫øt qu·∫£ ch·∫•t l∆∞·ª£ng cao!")
