"""
Gradio CheckboxGroup Demo Application
================================================================================

Module: script06.py
Author: @rain1024
Version: 1.0.0
Last Modified: 2025
Development Environment: Cursor IDE with Claude-4-Sonnet

DESCRIPTION:
    This module demonstrates a Gradio application showcasing CheckboxGroup
    functionality. It provides examples of how to use CheckboxGroup in
    different scenarios including food preferences, skills selection,
    and language preferences.
"""

import gradio as gr

def process_food_preferences(selected_foods):
    """
    Process selected food preferences
    """
    if not selected_foods:
        return "B·∫°n ch∆∞a ch·ªçn m√≥n ƒÉn n√†o!"
    
    result = f"‚úÖ B·∫°n ƒë√£ ch·ªçn {len(selected_foods)} m√≥n ƒÉn:\n"
    for food in selected_foods:
        result += f"‚Ä¢ {food}\n"
    
    # Add some recommendations based on selections
    recommendations = []
    if "Pizza" in selected_foods:
        recommendations.append("Th·ª≠ pizza Margherita v·ªõi ph√¥ mai t∆∞∆°i!")
    if "Sushi" in selected_foods:
        recommendations.append("G·ª£i √Ω: Sashimi c√° h·ªìi r·∫•t t∆∞∆°i ngon!")
    if "Ph·ªü" in selected_foods:
        recommendations.append("Ph·ªü b√≤ t√°i ch√≠n v·ªõi rau th∆°m l√† tuy·ªát v·ªùi!")
    
    if recommendations:
        result += "\nüí° G·ª£i √Ω cho b·∫°n:\n"
        for rec in recommendations:
            result += f"‚Ä¢ {rec}\n"
    
    return result

def process_skills(selected_skills):
    """
    Process selected programming skills
    """
    if not selected_skills:
        return "B·∫°n ch∆∞a ch·ªçn k·ªπ nƒÉng n√†o!"
    
    result = f"üîß K·ªπ nƒÉng c·ªßa b·∫°n ({len(selected_skills)} k·ªπ nƒÉng):\n"
    
    # Categorize skills
    frontend_skills = ["HTML/CSS", "JavaScript", "React", "Vue.js"]
    backend_skills = ["Python", "Java", "Node.js", "PHP"]
    database_skills = ["SQL", "MongoDB", "PostgreSQL"]
    
    frontend_selected = [skill for skill in selected_skills if skill in frontend_skills]
    backend_selected = [skill for skill in selected_skills if skill in backend_skills]
    database_selected = [skill for skill in selected_skills if skill in database_skills]
    
    if frontend_selected:
        result += f"\nüé® Frontend: {', '.join(frontend_selected)}"
    if backend_selected:
        result += f"\n‚öôÔ∏è Backend: {', '.join(backend_selected)}"
    if database_selected:
        result += f"\nüóÑÔ∏è Database: {', '.join(database_selected)}"
    
    # Career suggestions
    if len(selected_skills) >= 5:
        result += "\n\nüöÄ B·∫°n c√≥ k·ªπ nƒÉng to√†n di·ªán! C√≥ th·ªÉ l√†m Full-stack Developer."
    elif frontend_selected and not backend_selected:
        result += "\n\nüí° G·ª£i √Ω: H·ªçc th√™m backend ƒë·ªÉ tr·ªü th√†nh Full-stack Developer!"
    elif backend_selected and not frontend_selected:
        result += "\n\nüí° G·ª£i √Ω: H·ªçc th√™m frontend ƒë·ªÉ m·ªü r·ªông k·ªπ nƒÉng!"
    
    return result

def process_languages(selected_languages):
    """
    Process selected languages
    """
    if not selected_languages:
        return "B·∫°n ch∆∞a ch·ªçn ng√¥n ng·ªØ n√†o!"
    
    result = f"üåç Ng√¥n ng·ªØ b·∫°n bi·∫øt ({len(selected_languages)} ng√¥n ng·ªØ):\n"
    
    # Language info
    language_info = {
        "Ti·∫øng Vi·ªát": "üáªüá≥ Ng√¥n ng·ªØ m·∫π ƒë·∫ª",
        "English": "üá∫üá∏ Ng√¥n ng·ªØ qu·ªëc t·∫ø",
        "‰∏≠Êñá": "üá®üá≥ Ng√¥n ng·ªØ c√≥ nhi·ªÅu ng∆∞·ªùi n√≥i nh·∫•t",
        "Êó•Êú¨Ë™û": "üáØüáµ Ng√¥n ng·ªØ c√¥ng ngh·ªá",
        "ÌïúÍµ≠Ïñ¥": "üá∞üá∑ Ng√¥n ng·ªØ K-culture",
        "Fran√ßais": "üá´üá∑ Ng√¥n ng·ªØ l√£ng m·∫°n",
        "Espa√±ol": "üá™üá∏ Ng√¥n ng·ªØ Latin",
        "Deutsch": "üá©üá™ Ng√¥n ng·ªØ k·ªπ thu·∫≠t"
    }
    
    for lang in selected_languages:
        info = language_info.get(lang, "üåê Ng√¥n ng·ªØ qu·ªëc t·∫ø")
        result += f"‚Ä¢ {lang} - {info}\n"
    
    # Benefits
    if len(selected_languages) >= 4:
        result += "\nüéâ Tuy·ªát v·ªùi! B·∫°n l√† m·ªôt polyglot th·ª±c th·ª•!"
    elif len(selected_languages) >= 2:
        result += "\n‚ú® B·∫°n c√≥ l·ª£i th·∫ø l·ªõn trong giao ti·∫øp qu·ªëc t·∫ø!"
    
    return result

def create_gradio_interface():
    """
    Create and configure the Gradio interface for CheckboxGroup demo
    """
    with gr.Blocks(theme=gr.themes.Soft(), title="CheckboxGroup Demo") as demo:
        gr.Markdown("""
        # üìã Gradio CheckboxGroup Demo
        
        ·ª®ng d·ª•ng demo c√°c ch·ª©c nƒÉng c·ªßa CheckboxGroup trong Gradio.
        Ch·ªçn c√°c m·ª•c b·∫°n th√≠ch v√† xem k·∫øt qu·∫£ ƒë∆∞·ª£c x·ª≠ l√Ω!
        """)
        
        with gr.Tab("üçï S·ªü th√≠ch ·∫©m th·ª±c"):
            gr.Markdown("### Ch·ªçn nh·ªØng m√≥n ƒÉn b·∫°n y√™u th√≠ch:")
            
            food_checkbox = gr.CheckboxGroup(
                label="M√≥n ƒÉn y√™u th√≠ch",
                choices=[
                    "Pizza", "Sushi", "Ph·ªü", "B√°nh m√¨", "Hamburger",
                    "Pasta", "Ramen", "B√°nh cu·ªën", "Tacos", "Dim Sum"
                ],
                value=["Pizza", "Ph·ªü"],
                interactive=True
            )
            
            food_button = gr.Button("X·ª≠ l√Ω s·ªü th√≠ch", variant="primary")
            food_output = gr.Textbox(
                label="K·∫øt qu·∫£",
                lines=10,
                interactive=False
            )
            
            food_button.click(
                fn=process_food_preferences,
                inputs=[food_checkbox],
                outputs=[food_output]
            )
        
        with gr.Tab("üíª K·ªπ nƒÉng l·∫≠p tr√¨nh"):
            gr.Markdown("### Ch·ªçn nh·ªØng k·ªπ nƒÉng l·∫≠p tr√¨nh b·∫°n c√≥:")
            
            skills_checkbox = gr.CheckboxGroup(
                label="K·ªπ nƒÉng l·∫≠p tr√¨nh",
                choices=[
                    "Python", "JavaScript", "Java", "HTML/CSS", 
                    "React", "Vue.js", "Node.js", "PHP", 
                    "SQL", "MongoDB", "PostgreSQL", "Docker"
                ],
                value=["Python", "JavaScript"],
                interactive=True
            )
            
            skills_button = gr.Button("Ph√¢n t√≠ch k·ªπ nƒÉng", variant="primary")
            skills_output = gr.Textbox(
                label="Ph√¢n t√≠ch k·ªπ nƒÉng",
                lines=10,
                interactive=False
            )
            
            skills_button.click(
                fn=process_skills,
                inputs=[skills_checkbox],
                outputs=[skills_output]
            )
        
        with gr.Tab("üåç Ng√¥n ng·ªØ"):
            gr.Markdown("### Ch·ªçn nh·ªØng ng√¥n ng·ªØ b·∫°n bi·∫øt:")
            
            lang_checkbox = gr.CheckboxGroup(
                label="Ng√¥n ng·ªØ",
                choices=[
                    "Ti·∫øng Vi·ªát", "English", "‰∏≠Êñá", "Êó•Êú¨Ë™û", 
                    "ÌïúÍµ≠Ïñ¥", "Fran√ßais", "Espa√±ol", "Deutsch"
                ],
                value=["Ti·∫øng Vi·ªát", "English"],
                interactive=True
            )
            
            lang_button = gr.Button("Ph√¢n t√≠ch ng√¥n ng·ªØ", variant="primary")
            lang_output = gr.Textbox(
                label="Ph√¢n t√≠ch ng√¥n ng·ªØ",
                lines=10,
                interactive=False
            )
            
            lang_button.click(
                fn=process_languages,
                inputs=[lang_checkbox],
                outputs=[lang_output]
            )
        
        with gr.Tab("‚ÑπÔ∏è H∆∞·ªõng d·∫´n"):
            gr.Markdown("""
            ## C√°ch s·ª≠ d·ª•ng CheckboxGroup
            
            ### 1. T·∫°o CheckboxGroup c∆° b·∫£n:
            ```python
            gr.CheckboxGroup(
                label="Nh√£n",
                choices=["L·ª±a ch·ªçn 1", "L·ª±a ch·ªçn 2", "L·ª±a ch·ªçn 3"],
                value=["L·ª±a ch·ªçn 1"],  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                interactive=True
            )
            ```
            
            ### 2. C√°c tham s·ªë quan tr·ªçng:
            - **label**: Nh√£n hi·ªÉn th·ªã
            - **choices**: Danh s√°ch c√°c l·ª±a ch·ªçn
            - **value**: Gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë∆∞·ª£c ch·ªçn
            - **interactive**: Cho ph√©p t∆∞∆°ng t√°c
            - **visible**: Hi·ªÉn th·ªã/·∫©n component
            
            ### 3. X·ª≠ l√Ω d·ªØ li·ªáu:
            - D·ªØ li·ªáu tr·∫£ v·ªÅ l√† m·ªôt **list** ch·ª©a c√°c item ƒë∆∞·ª£c ch·ªçn
            - C√≥ th·ªÉ x·ª≠ l√Ω theo t·ª´ng lo·∫°i ho·∫∑c t·ªïng h·ª£p
            
            ### 4. ·ª®ng d·ª•ng th·ª±c t·∫ø:
            - Form kh·∫£o s√°t
            - Ch·ªçn s·ªü th√≠ch
            - C·∫•u h√¨nh h·ªá th·ªëng
            - Filter d·ªØ li·ªáu
            """)
    
    return demo

if __name__ == "__main__":
    # Create and launch the Gradio interface
    demo = create_gradio_interface()
    
    # Launch the app
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True
    )

