"""
Personal Financial Advisor Gradio Application using LLM
================================================================================

Module: script04.py
Author: @rain1024
Version: 1.0.0
Last Modified: 2025
Development Environment: Cursor IDE with Claude-4-Sonnet

DESCRIPTION:
    This module demonstrates a personal financial advisor application using Azure OpenAI LLM
    and Gradio. It provides personalized financial advice through an easy-to-use
    web interface, generating recommendations based on personal information and financial status.
"""

import gradio as gr
import os
from dotenv import load_dotenv
from langchain_openai import AzureChatOpenAI
from langchain.schema import HumanMessage

# Load environment variables
load_dotenv()

# Configure Azure OpenAI LLM
llm = AzureChatOpenAI(
    azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
    api_key=os.getenv("AZURE_OPENAI_API_KEY"),
    api_version=os.getenv("AZURE_OPENAI_API_VERSION", "2023-12-01-preview"),
    azure_deployment=os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME"),
    temperature=0.7,
    max_tokens=2000
)

def generate_financial_advice(description, age, has_family, num_children, current_salary):
    """
    Generate personalized financial advice based on user's personal and financial information
    """
    if not description.strip():
        return "Vui l√≤ng cung c·∫•p m√¥ t·∫£ v·ªÅ b·∫£n th√¢n ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c t∆∞ v·∫•n ph√π h·ª£p."
    
    if not current_salary or current_salary <= 0:
        return "Vui l√≤ng nh·∫≠p m·ª©c l∆∞∆°ng hi·ªán t·∫°i h·ª£p l·ªá."
    
    try:
        # Format salary for display
        salary_formatted = f"{current_salary:,} VND"
        
        # Determine life stage and responsibilities
        family_status = "ƒë√£ c√≥ gia ƒë√¨nh" if has_family else "ch∆∞a c√≥ gia ƒë√¨nh"
        children_info = f"c√≥ {num_children} con" if has_family and num_children > 0 else "ch∆∞a c√≥ con"
        
        # Create age-specific advice categories
        if age < 25:
            life_stage = "giai ƒëo·∫°n b·∫Øt ƒë·∫ßu s·ª± nghi·ªáp"
            priorities = "t√≠ch l≈©y, h·ªçc h·ªèi v√† ƒë·∫ßu t∆∞ v√†o b·∫£n th√¢n"
        elif age < 35:
            life_stage = "giai ƒëo·∫°n ph√°t tri·ªÉn s·ª± nghi·ªáp"
            priorities = "t√≠ch l≈©y t√†i s·∫£n, mua nh√† v√† ƒë·∫ßu t∆∞ d√†i h·∫°n"
        elif age < 50:
            life_stage = "giai ƒëo·∫°n ·ªïn ƒë·ªãnh v√† t√≠ch l≈©y"
            priorities = "t·ªëi ∆∞u h√≥a ƒë·∫ßu t∆∞, chu·∫©n b·ªã cho t∆∞∆°ng lai con c√°i"
        else:
            life_stage = "giai ƒëo·∫°n chu·∫©n b·ªã ngh·ªâ h∆∞u"
            priorities = "b·∫£o to√†n t√†i s·∫£n v√† chu·∫©n b·ªã h∆∞u tr√≠"
        
        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n chuy√™n nghi·ªáp t·∫°i Vi·ªát Nam. 
        H√£y ƒë∆∞a ra l·ªùi khuy√™n t√†i ch√≠nh c√° nh√¢n chi ti·∫øt v√† th·ª±c t·∫ø d·ª±a tr√™n th√¥ng tin sau:

        TH√îNG TIN C√Å NH√ÇN:
        - M√¥ t·∫£: {description}
        - Tu·ªïi: {age} tu·ªïi ({life_stage})
        - T√¨nh tr·∫°ng gia ƒë√¨nh: {family_status}
        - S·ªë con: {children_info}
        - M·ª©c l∆∞∆°ng hi·ªán t·∫°i: {salary_formatted}

        Y√äU C·∫¶U TU V·∫§N:
        1. Ph√¢n t√≠ch t√¨nh h√¨nh t√†i ch√≠nh hi·ªán t·∫°i
        2. ƒê∆∞a ra k·∫ø ho·∫°ch ph√¢n b·ªï thu nh·∫≠p (50/30/20 rule ho·∫∑c ƒëi·ªÅu ch·ªânh ph√π h·ª£p)
        3. G·ª£i √Ω v·ªÅ ti·∫øt ki·ªám v√† ƒë·∫ßu t∆∞ ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi v√† ho√†n c·∫£nh
        4. L·ªùi khuy√™n v·ªÅ b·∫£o hi·ªÉm v√† qu·ªπ d·ª± ph√≤ng
        5. K·∫ø ho·∫°ch t√†i ch√≠nh d√†i h·∫°n ({priorities})
        6. Nh·ªØng l∆∞u √Ω ƒë·∫∑c bi·ªát d·ª±a tr√™n m√¥ t·∫£ c√° nh√¢n

        NGUY√äN T·∫ÆC:
        - ƒê∆∞a ra l·ªùi khuy√™n th·ª±c t·∫ø, ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán Vi·ªát Nam
        - S·ª≠ d·ª•ng s·ªë li·ªáu c·ª• th·ªÉ khi c√≥ th·ªÉ
        - ∆Øu ti√™n t√≠nh an to√†n v√† b·ªÅn v·ªØng
        - Tr√°nh c√°c khuy·∫øn ngh·ªã ƒë·∫ßu t∆∞ c√≥ r·ªßi ro cao
        - S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n v√† d·ªÖ hi·ªÉu

        H√£y tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt, c√≥ c·∫•u tr√∫c v√† th·ª±c t·∫ø.
        """
        
        # Send prompt to LLM
        message = HumanMessage(content=prompt)
        response = llm.invoke([message])
        
        return response.content
        
    except Exception as e:
        return f"L·ªói khi t·∫°o t∆∞ v·∫•n t√†i ch√≠nh: {str(e)}\n\nVui l√≤ng ki·ªÉm tra c·∫•u h√¨nh Azure OpenAI."

def create_gradio_interface():
    """
    Create and configure the Gradio interface for financial advisory
    """
    with gr.Blocks(theme=gr.themes.Soft(), title="üí∞ ·ª®ng d·ª•ng t∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n b·∫±ng AI") as demo:
        gr.Markdown("# üí∞ ·ª®ng d·ª•ng t∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n b·∫±ng AI")
        gr.Markdown("Nh·∫≠n t∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n chuy√™n nghi·ªáp t·ª´ tr√≠ tu·ªá nh√¢n t·∫°o. Cung c·∫•p th√¥ng tin c√° nh√¢n ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c l·ªùi khuy√™n t√†i ch√≠nh ph√π h·ª£p v·ªõi ho√†n c·∫£nh c·ªßa b·∫°n!")
        
        with gr.Row():
            with gr.Column(scale=1):
                description = gr.Textbox(
                    label="M√¥ t·∫£ v·ªÅ b·∫°n",
                    placeholder="H√£y m√¥ t·∫£ v·ªÅ b·∫£n th√¢n (ngh·ªÅ nghi·ªáp, m·ª•c ti√™u t√†i ch√≠nh, t√¨nh h√¨nh hi·ªán t·∫°i...)...",
                    lines=4,
                    max_lines=6
                )
                
                age = gr.Slider(
                    label="Tu·ªïi",
                    value=30,
                    minimum=18,
                    maximum=70,
                    step=1
                )
                
                has_family = gr.Checkbox(
                    label="ƒê√£ c√≥ gia ƒë√¨nh",
                    value=False
                )
                
                num_children = gr.Slider(
                    label="S·ªë con",
                    value=0,
                    minimum=0,
                    maximum=10,
                    step=1
                )
                
                current_salary = gr.Slider(
                    label="M·ª©c l∆∞∆°ng hi·ªán t·∫°i (VND)",
                    value=15000000,
                    minimum=5000000,
                    maximum=100000000,
                    step=1000000
                )
                
                submit_btn = gr.Button("T∆∞ v·∫•n t√†i ch√≠nh", variant="primary")
                
            with gr.Column(scale=2):
                advice_output = gr.Textbox(
                    label="T∆∞ v·∫•n t√†i ch√≠nh c√° nh√¢n",
                    lines=20,
                    max_lines=30
                )
        
        # Submit button click
        submit_btn.click(
            fn=generate_financial_advice,
            inputs=[description, age, has_family, num_children, current_salary],
            outputs=[advice_output]
        )
        
        # Examples
        gr.Examples(
            examples=[
                ["T√¥i l√† k·ªπ s∆∞ ph·∫ßn m·ªÅm, mu·ªën mua nh√† trong 3 nƒÉm t·ªõi v√† c√≥ k·∫ø ho·∫°ch k·∫øt h√¥n", 28, False, 0, 25000000],
                ["T√¥i l√†m gi√°o vi√™n, v·ª´a c√≥ con ƒë·∫ßu l√≤ng, mu·ªën t√≠ch l≈©y cho t∆∞∆°ng lai con", 32, True, 1, 12000000],
                ["T√¥i l√† doanh nh√¢n, mu·ªën m·ªü r·ªông kinh doanh v√† ƒë·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n", 40, True, 2, 50000000],
                ["T√¥i l√†m nh√¢n vi√™n vƒÉn ph√≤ng, mu·ªën chu·∫©n b·ªã ngh·ªâ h∆∞u s·ªõm", 45, True, 1, 20000000],
                ["T√¥i m·ªõi t·ªët nghi·ªáp, b·∫Øt ƒë·∫ßu ƒëi l√†m v√† mu·ªën h·ªçc c√°ch qu·∫£n l√Ω t√†i ch√≠nh", 23, False, 0, 8000000],
            ],
            inputs=[description, age, has_family, num_children, current_salary],
            outputs=[advice_output]
        )
    
    return demo

if __name__ == "__main__":
    # Create and launch the Gradio interface
    demo = create_gradio_interface()
    
    # Launch the app
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        debug=True
    )

